#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// Network Configuration
const char* ssid = "Kanchada_2.4G";        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô WiFi ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const char* password = "kan123456789";      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô WiFi ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// Web Application URLs - Local Development Server
// ‚úÖ ‡πÉ‡∏ä‡πâ IP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå: 172.20.10.8 (‡∏à‡∏≤‡∏Å ipconfig)
const char* detectionURL = "http://172.20.10.8:3000/api/detection";        
const char* heartbeatURL = "http://172.20.10.8:3000/api/esp32/heartbeat";  

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production (‡πÄ‡∏°‡∏∑‡πà‡∏≠ API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß)
// const char* detectionURL = "https://alertemail.vercel.app/api/detection";
// const char* heartbeatURL = "https://alertemail.vercel.app/api/esp32/heartbeat";

// Timing variables
unsigned long lastDetection = 0;
unsigned long lastHeartbeat = 0;
int detectionCount = 0;

void setup() {
    Serial.begin(115200);
    Serial.println("\nüß™ ESP32 Simple Test - Detection & Status");
    Serial.println("Sending test data to database and monitoring system");

    // Connect to WiFi
    WiFi.begin(ssid, password);
    Serial.print("Connecting to WiFi");
    
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    
    Serial.println();
    Serial.println("‚úÖ Connected to WiFi");
    Serial.print("üìç IP Address: ");
    Serial.println(WiFi.localIP());
    Serial.println("üåê Detection URL: " + String(detectionURL));
    Serial.println("üíì Heartbeat URL: " + String(heartbeatURL));
    
    delay(2000); // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    testAPIEndpoints();
    delay(3000);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    sendHeartbeat();
    delay(3000);
    sendTestDetection();
}

void sendTestDetection() {
    Serial.println("\nüîç Sending test detection data...");
    detectionCount++;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏™‡∏∏‡πà‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏ö‡∏Ñ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    bool humanDetected = random(0, 100) < 80; // 80% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏û‡∏ö‡∏Ñ‡∏ô
    float confidence = humanDetected ? random(75, 100) / 100.0 : random(20, 60) / 100.0;
    
    DynamicJsonDocument doc(1024);
    
    // General Information
    doc["device_id"] = "ESP32_Camera_01";  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Dashboard
    doc["location"] = "Front Door (Test)";
    
    // Processing Performance (‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•)
    doc["dsp_time"] = random(80, 150);           // 80-150ms
    doc["classification_time"] = random(200, 400); // 200-400ms
    doc["anomaly_time"] = random(50, 100);       // 50-100ms
    
    // Detection Results
    doc["human_detected"] = humanDetected;
    doc["confidence"] = confidence;
    
    String detectedObjects;
    if (humanDetected) {
        detectedObjects = "Human (" + String(confidence * 100, 1) + "% confidence)";
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏≠‡∏∑‡πà‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if (random(0, 100) < 30) {
            detectedObjects += ", Bag (" + String(random(40, 70)) + "%)";
        }
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ô ‡∏≠‡∏≤‡∏à‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô
        String objects[] = {"Cat", "Dog", "Car", "Bird", "Bicycle"};
        int objIndex = random(0, 5);
        detectedObjects = objects[objIndex] + " (" + String(random(30, 70)) + "%)";
    }
    
    doc["detected_objects"] = detectedObjects;

    // Convert to JSON string
    String jsonString;
    serializeJson(doc, jsonString);
    
    Serial.println("üì§ Detection #" + String(detectionCount) + " - JSON data:");
    Serial.println(jsonString);

    // Send HTTP POST request
    HTTPClient http;
    http.begin(detectionURL);
    http.addHeader("Content-Type", "application/json");
    http.setTimeout(30000); // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ timeout

    int httpResponseCode = http.POST(jsonString);

    if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.printf("‚úÖ Detection Response Code: %d\n", httpResponseCode);
        Serial.println("üì® Server Response:");
        Serial.println(response);
        
        if (httpResponseCode == 200) {
            Serial.println("üéâ Detection data sent successfully!");
            if (humanDetected) {
                Serial.println("üë§ Human detected - Email should be sent!");
            } else {
                Serial.println("üö´ No human detected in this test");
            }
        } else if (httpResponseCode >= 400) {
            Serial.printf("‚ö†Ô∏è Server Error: %d\n", httpResponseCode);
        }
    } else {
        Serial.printf("‚ùå Detection Error: %s\n", http.errorToString(httpResponseCode).c_str());
        printConnectionError(httpResponseCode);
    }

    http.end();
    Serial.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
}

void sendHeartbeat() {
    Serial.println("\nüíì Sending Camera heartbeat...");
    
    // ‡∏™‡πà‡∏á Camera heartbeat
    DynamicJsonDocument cameraDoc(512);
    cameraDoc["device_id"] = "ESP32_Camera_01";  // ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Dashboard
    cameraDoc["timestamp"] = millis();
    cameraDoc["location"] = "Front Door (Test)";
    cameraDoc["version"] = "1.0.0-test";
    cameraDoc["wifi_strength"] = WiFi.RSSI();
    cameraDoc["uptime"] = millis() / 1000;
    cameraDoc["free_heap"] = ESP.getFreeHeap();
    cameraDoc["device_type"] = "camera";
    cameraDoc["status"] = "testing";

    String cameraJson;
    serializeJson(cameraDoc, cameraJson);
    
    Serial.println("üì§ Camera Heartbeat JSON:");
    Serial.println(cameraJson);

    HTTPClient http1;
    http1.begin(heartbeatURL);
    http1.addHeader("Content-Type", "application/json");
    http1.setTimeout(15000);

    int cameraResponse = http1.POST(cameraJson);
    
    if (cameraResponse > 0) {
        Serial.printf("‚úÖ Camera Heartbeat Code: %d\n", cameraResponse);
        if (cameraResponse == 200) {
            Serial.println("üíö Camera should show Online");
        }
    } else {
        Serial.printf("‚ùå Camera Heartbeat Error: %s\n", http1.errorToString(cameraResponse).c_str());
    }
    http1.end();

    delay(1000); // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    // ‡∏™‡πà‡∏á Gateway heartbeat
    Serial.println("üíì Sending Gateway heartbeat...");
    
    DynamicJsonDocument gatewayDoc(512);
    gatewayDoc["device_id"] = "ESP32_Gateway_02";  // ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Dashboard
    gatewayDoc["timestamp"] = millis();
    gatewayDoc["location"] = "Network Gateway (Test)";
    gatewayDoc["version"] = "1.0.0-test";
    gatewayDoc["wifi_strength"] = WiFi.RSSI();
    gatewayDoc["uptime"] = millis() / 1000;
    gatewayDoc["free_heap"] = ESP.getFreeHeap();
    gatewayDoc["device_type"] = "gateway";
    gatewayDoc["status"] = "testing";

    String gatewayJson;
    serializeJson(gatewayDoc, gatewayJson);
    
    Serial.println("üì§ Gateway Heartbeat JSON:");
    Serial.println(gatewayJson);

    HTTPClient http2;
    http2.begin(heartbeatURL);
    http2.addHeader("Content-Type", "application/json");
    http2.setTimeout(15000);

    int gatewayResponse = http2.POST(gatewayJson);
    
    if (gatewayResponse > 0) {
        Serial.printf("‚úÖ Gateway Heartbeat Code: %d\n", gatewayResponse);
        if (gatewayResponse == 200) {
            Serial.println("üíö Gateway should show Online");
        }
    } else {
        Serial.printf("‚ùå Gateway Heartbeat Error: %s\n", http2.errorToString(gatewayResponse).c_str());
    }
    http2.end();
    Serial.println();
}

void printConnectionError(int errorCode) {
    if (errorCode == HTTPC_ERROR_CONNECTION_REFUSED) {
        Serial.println("üîå Connection refused - Check URL");
    } else if (errorCode == HTTPC_ERROR_READ_TIMEOUT) {
        Serial.println("‚è±Ô∏è Read timeout - Server response took too long");
        Serial.println("üí° This might be normal if email processing takes time");
    } else if (errorCode == HTTPC_ERROR_CONNECTION_LOST) {
        Serial.println("üì° Connection lost - Check WiFi connection");
    } else if (errorCode == HTTPC_ERROR_SEND_HEADER_FAILED) {
        Serial.println("üì§ Failed to send headers - Check server");
    }
}

void printStatus() {
    Serial.println("\nüìä Test Status:");
    Serial.printf("‚è∞ Uptime: %lu seconds\n", millis() / 1000);
    Serial.printf("üîã Free Memory: %d bytes\n", ESP.getFreeHeap());
    Serial.printf("üì∂ WiFi Signal: %d dBm\n", WiFi.RSSI());
    Serial.printf("üîç Detections Sent: %d\n", detectionCount);
    Serial.printf("üåê IP Address: %s\n", WiFi.localIP().toString().c_str());
    Serial.println();
}

void loop() {
    unsigned long currentTime = millis();
    
    // ‡∏™‡πà‡∏á heartbeat ‡∏ó‡∏∏‡∏Å 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
    if (currentTime - lastHeartbeat >= 15000) {
        sendHeartbeat();
        lastHeartbeat = currentTime;
    }
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• detection ‡∏ó‡∏∏‡∏Å 45 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    if (currentTime - lastDetection >= 45000) {
        sendTestDetection();
        lastDetection = currentTime;
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ
    static unsigned long lastStatus = 0;
    if (currentTime - lastStatus >= 120000) {
        printStatus();
        lastStatus = currentTime;
    }
    
    delay(1000);
}

void testAPIEndpoints() {
    Serial.println("\nüß™ Testing API endpoints...");
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö heartbeat API ‡∏î‡πâ‡∏ß‡∏¢ GET request
    Serial.println("üì° Testing heartbeat API...");
    HTTPClient http;
    http.begin(heartbeatURL);
    http.setTimeout(10000);
    
    int getResponse = http.GET();
    Serial.printf("GET %s -> Response: %d\n", heartbeatURL, getResponse);
    
    if (getResponse > 0) {
        String response = http.getString();
        Serial.println("Response: " + response);
    }
    http.end();
    
    delay(1000);
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö detection API ‡∏î‡πâ‡∏ß‡∏¢ GET request
    Serial.println("üì° Testing detection API...");
    HTTPClient http2;
    http2.begin(detectionURL);
    http2.setTimeout(10000);
    
    int getResponse2 = http2.GET();
    Serial.printf("GET %s -> Response: %d\n", detectionURL, getResponse2);
    
    if (getResponse2 > 0) {
        String response2 = http2.getString();
        Serial.println("Response: " + response2);
    }
    http2.end();
    
    Serial.println("üîç API Test completed. Check responses above.");
    Serial.println("‚úÖ Code 200 = OK, ‚ùå Code 404 = Not Found, ‚ùå Code 405 = Method Not Allowed");
    Serial.println();
} 